# -*- coding: utf-8 -*-
"""BrainTumor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r7GQx_pum_Ma_R8lBj_7lBzKof1ZtNTS
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import matplotlib.pyplot as plt
import keras
from keras.layers import Dense, Conv2D, MaxPool2D, Dropout, Flatten
from keras.models import Sequential
from keras.preprocessing import image

train_datagen = image.ImageDataGenerator(
    rescale = 1/255, 
    horizontal_flip=True,   
    zoom_range = 0.2, 
    shear_range = 0.2

)
train_data = train_datagen.flow_from_directory(directory="/content/drive/MyDrive/Brain tumor/brain_tumor_dataset/train", 
                                               target_size=(256,256),
                                               batch_size=16,
                                               class_mode='binary')

train_data.class_indices

test_datagen = image.ImageDataGenerator(
    rescale = 1/255
    

)
test_data = test_datagen.flow_from_directory(directory="/content/drive/MyDrive/Brain tumor/brain_tumor_dataset/val", 
                                               target_size=(256,256),
                                               batch_size=16,
                                               class_mode='binary')

model = Sequential()
model.add(Conv2D(filters=32, kernel_size=(3,3),activation='relu',input_shape=(256,256,3)))
#relu = rectified linear activation unit

model.add(Conv2D(filters=64, kernel_size=(3,3),activation='relu'))
model.add(MaxPool2D())
model.add(Dropout(rate=0.25))

model.add(Conv2D(filters=64, kernel_size=(3,3),activation='relu'))
model.add(MaxPool2D())
model.add(Dropout(rate=0.25))

model.add(Conv2D(filters=128, kernel_size=(3,3),activation='relu'))
model.add(MaxPool2D())
model.add(Dropout(rate=0.25))

model.add(Flatten())
model.add(Dense(units=64,activation='relu'))
model.add(Dropout(rate=0.50))
model.add(Dense(units=1,activation='sigmoid'))

model.compile(loss=keras.losses.binary_crossentropy,optimizer="adam",metrics=['acc'])

model.summary()

model.fit_generator(train_data,steps_per_epoch=8,epochs=10,validation_steps=2,validation_data=test_data)

path = "/content/drive/MyDrive/Brain tumor/brain_tumor_dataset/val/yes/Y180.jpg"
img = image.load_img(path, target_size=(256,256))
img = image.img_to_array(img)/255
img=np.array([img])
img.shape


# predictions = (model.predict(img)>0.5).astype("int32")
# print(predictions)

predictions = (model.predict(img)>0.5).astype("int32")
print(predictions)

if predictions[0][0]==0:
  print("The patient does not have BRAIN TUMOR")
else:
  print("The patient have BRAIN TUMOR")